"use strict";

var _rclone = require("./rclone");

var _constants = require("./constants");

var _PathCipher = _interopRequireDefault(require("./ciphers/PathCipher"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

test('both password and salt must be passed', function (done) {
  (0, _rclone.Rclone)({
    password: 'hello'
  })["catch"](function (err) {
    return expect(err).toMatchSnapshot('password and salt');
  }, done());
});
test('derive keys from password', function (done) {
  (0, _rclone.Rclone)({
    password: 'UmyLSdRHfew6aual28-ggx78qHqSfQ',
    salt: 'Cj3gLa5PVwc2aot0QpKiOZ3YEzs3Sw'
  }).then(function (rclone) {
    expect(rclone).toMatchSnapshot('empty key rclone');
    done();
  })["catch"](function (err) {
    return done.fail(err);
  });
});
test('use default salt when empty', function (done) {
  // Generated encrypted string with the use of rclone and empty salt
  var rcloneEncryptedFileName = 'ecrk8fu3e0pk86td3r634nan08';
  var rcloneDecryptedFileName = 'encrypted_file';
  (0, _rclone.Rclone)({
    password: 'UmyLSdRHfew6aual28-ggx78qHqSfQ',
    salt: ''
  }).then(function (rclone) {
    var pathCipher = (0, _PathCipher["default"])(rclone);
    var decryptedString = pathCipher.decrypt(rcloneEncryptedFileName);
    expect(decryptedString).toEqual(rcloneDecryptedFileName);
    done();
  })["catch"](function (err) {
    return done.fail(err);
  });
});