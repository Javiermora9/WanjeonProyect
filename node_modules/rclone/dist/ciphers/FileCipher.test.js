"use strict";

var _FileCipher = _interopRequireDefault(require("./FileCipher"));

var _rclone = require("../rclone");

var _fs = _interopRequireDefault(require("fs"));

var _streamChunker = _interopRequireDefault(require("stream-chunker"));

var _streamEqual = _interopRequireDefault(require("stream-equal"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var key = {
  // password: 'UmyLSdRHfew6aual28-ggx78qHqSfQ',
  // salt: 'Cj3gLa5PVwc2aot0QpKiOZ3YEzs3Sw'
  // prettier-ignore
  dataKey: new Uint8Array([141, 221, 255, 96, 210, 69, 65, 244, 71, 146, 103, 45, 248, 199, 117, 104, 63, 158, 208, 37, 247, 132, 60, 19, 21, 123, 90, 106, 38, 191, 116, 151])
};
var cipher = (0, _FileCipher["default"])(key);
test('dataKey is needed', function () {
  expect(function () {
    (0, _FileCipher["default"])();
  }).toThrowErrorMatchingSnapshot();
});
test('decrypt full stream', function (done) {
  var decryptedStream = cipher.createReadStream(createFielStreamFactory(getPath('test')));

  var compareStream = _fs["default"].createReadStream(getPath('test.png'));

  (0, _streamEqual["default"])(decryptedStream, compareStream, function (err, equal) {
    if (err) done.fail(err);
    expect(equal).toBeTruthy();
    done();
  });
});
test('provide random access in stream', function (done) {
  var randomAccess = {
    start: 200
  };
  var decryptedStream = cipher.createReadStream(createFielStreamFactory(getPath('test')), randomAccess);

  var compareStream = _fs["default"].createReadStream(getPath('test.png'), randomAccess);

  (0, _streamEqual["default"])(decryptedStream, compareStream, function (err, equal) {
    if (err) done.fail(err);
    expect(equal).toBeTruthy();
    done();
  });
});
test('random access over block boundary', function (done) {
  var randomAccess = {
    start: _FileCipher["default"].blockSize + 20
  };
  var decryptedStream = cipher.createReadStream(createFielStreamFactory(getPath('nonceTest')), randomAccess);

  var compareStream = _fs["default"].createReadStream(getPath('nonceTest.decrypted'), randomAccess);

  (0, _streamEqual["default"])(decryptedStream, compareStream, function (err, equal) {
    if (err) done.fail(err);
    expect(equal).toBeTruthy();
    done();
  });
});
test('fail on wrong magic word', function (done) {
  cipher.createReadStream(createFielStreamFactory(getPath('test.png'))).once('data', function (data) {
    done.fail("We don't want data to be read here");
  }).once('error', function (err) {
    expect(err).toMatchSnapshot();
    done();
  });
});
test('fail if decryption is not possible', function (done) {
  var wrongCipher = (0, _FileCipher["default"])({
    dataKey: new Uint8Array(32)
  });
  wrongCipher.createReadStream(createFielStreamFactory(getPath('test'))).once('data', function (data) {
    done.fail("We don't want data to be read here");
  }).once('error', function (err) {
    expect(err).toMatchSnapshot();
    done();
  });
});
test('calculate decrpyted size', function () {
  // prettier-ignore
  var cases = [[0, 32], [1, 32 + 16 + 1], [65536, 32 + 16 + 65536], [65537, 32 + 16 + 65536 + 16 + 1], [1 << 30, 32 + 16384 * (16 + 65536)], [1 << 20, 32 + 16 * (16 + 65536)], [(1 << 20) + 65535, 32 + 16 * (16 + 65536) + 16 + 65535]];
  cases.forEach(function (item) {
    expect(cipher.calculateDecryptedSize(item[1])).toEqual(item[0]);
  });
});

function createFielStreamFactory(url) {
  return function (opts) {
    return _fs["default"].createReadStream(url, opts).pipe((0, _streamChunker["default"])(opts.chunkSize, {
      flush: true
    }));
  };
}

function getPath(name) {
  return __dirname + '/__fixtures__/FileCipher/' + name;
}