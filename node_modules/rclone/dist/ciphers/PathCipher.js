"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = PathCipher;

var _aesJs = require("aes-js");

var _base32Decode = _interopRequireDefault(require("base32-decode"));

var _base32Encode = _interopRequireDefault(require("base32-encode"));

var _eme = require("./eme");

var _textEncoding = require("./text-encoding");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var pkcs7 = _aesJs.padding.pkcs7;

var decodeUTF8 = function () {
  var decoder = new _textEncoding.TextDecoder('utf-8');
  return function (data) {
    return decoder.decode(new Uint8Array(data));
  };
}();

var encodeUTF8 = function () {
  var encoder = new _textEncoding.TextEncoder('utf-8');
  return function (data) {
    return encoder.encode(data);
  };
}();

function PathCipher() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      nameKey = _ref.nameKey,
      nameTweak = _ref.nameTweak;

  if (nameKey === undefined || nameTweak === undefined) {
    throw new Error('nameKey and nameTweak must be specified');
  } // Name Cipher Fuctions


  var nameCipher = new _aesJs.AES(nameKey);

  function encryptName(name) {
    var ciphertext = encodeUTF8(name);
    var paddedCipherText = pkcs7.pad(ciphertext);
    var rawCipherText = (0, _eme.Encrypt)(nameCipher, nameTweak, paddedCipherText);
    var encodedCipher = (0, _base32Encode["default"])(rawCipherText, 'RFC4648-HEX');
    return encodedCipher.replace(/=+$/, '').toLowerCase();
  }

  function encrypt(path) {
    return path.split('/').map(encryptName).join('/');
  }

  function decryptName(name) {
    var rawCipherText = new Uint8Array((0, _base32Decode["default"])(name.toUpperCase(), 'RFC4648-HEX'));
    var paddedPlaintext = (0, _eme.Decrypt)(nameCipher, nameTweak, rawCipherText);
    return decodeUTF8(pkcs7.strip(paddedPlaintext));
  }

  function decrypt(path) {
    return path.split('/').map(decryptName).join('/');
  }

  return {
    encryptName: encryptName,
    decryptName: decryptName,
    encrypt: encrypt,
    decrypt: decrypt
  };
}